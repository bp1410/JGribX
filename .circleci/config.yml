# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies
      
      - run:
            name: Install Git LFS
            command: |
                curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
                sudo apt-get install git-lfs
                
      - restore_cache:
          - keys:
              - git-lfs-cache-{{ checksum ".git/index"}}
              - git-lfs-cache-
      
      - run:
            name: Pull Git LFS files
            command: |
                git lfs install
                git lfs checkout || git lfs pull
                
      # Cache Git LFS files
      - save_cache:
            key: git-lfs-cache-{{ checksum ".git/index"}}
            paths:
              - .git/lfs/objects

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test
      
      - run:
            name: Save test results
            command: |
                mkdir -p ~/test-results/junit/
                find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
                mkdir -p ~/test-results/junit/report/
                cp -r build/reports/tests/test ~/test-results/junit/report/
            when: always
      - store_test_results:
            path: ~/test-results
      - store_artifacts:
            path: ~/test-results/junit
